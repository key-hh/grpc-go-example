// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: stream/stream.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerClient interface {
	SendToStream(ctx context.Context, opts ...grpc.CallOption) (Streamer_SendToStreamClient, error)
	ReceiveFromStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Streamer_ReceiveFromStreamClient, error)
	ChatInStream(ctx context.Context, opts ...grpc.CallOption) (Streamer_ChatInStreamClient, error)
}

type streamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerClient(cc grpc.ClientConnInterface) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) SendToStream(ctx context.Context, opts ...grpc.CallOption) (Streamer_SendToStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streamer_ServiceDesc.Streams[0], "/stream.Streamer/sendToStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerSendToStreamClient{stream}
	return x, nil
}

type Streamer_SendToStreamClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamerSendToStreamClient struct {
	grpc.ClientStream
}

func (x *streamerSendToStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerSendToStreamClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamerClient) ReceiveFromStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Streamer_ReceiveFromStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streamer_ServiceDesc.Streams[1], "/stream.Streamer/receiveFromStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerReceiveFromStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_ReceiveFromStreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamerReceiveFromStreamClient struct {
	grpc.ClientStream
}

func (x *streamerReceiveFromStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamerClient) ChatInStream(ctx context.Context, opts ...grpc.CallOption) (Streamer_ChatInStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streamer_ServiceDesc.Streams[2], "/stream.Streamer/chatInStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerChatInStreamClient{stream}
	return x, nil
}

type Streamer_ChatInStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamerChatInStreamClient struct {
	grpc.ClientStream
}

func (x *streamerChatInStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerChatInStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
// All implementations must embed UnimplementedStreamerServer
// for forward compatibility
type StreamerServer interface {
	SendToStream(Streamer_SendToStreamServer) error
	ReceiveFromStream(*StreamRequest, Streamer_ReceiveFromStreamServer) error
	ChatInStream(Streamer_ChatInStreamServer) error
	mustEmbedUnimplementedStreamerServer()
}

// UnimplementedStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (UnimplementedStreamerServer) SendToStream(Streamer_SendToStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendToStream not implemented")
}
func (UnimplementedStreamerServer) ReceiveFromStream(*StreamRequest, Streamer_ReceiveFromStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveFromStream not implemented")
}
func (UnimplementedStreamerServer) ChatInStream(Streamer_ChatInStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatInStream not implemented")
}
func (UnimplementedStreamerServer) mustEmbedUnimplementedStreamerServer() {}

// UnsafeStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServer will
// result in compilation errors.
type UnsafeStreamerServer interface {
	mustEmbedUnimplementedStreamerServer()
}

func RegisterStreamerServer(s grpc.ServiceRegistrar, srv StreamerServer) {
	s.RegisterService(&Streamer_ServiceDesc, srv)
}

func _Streamer_SendToStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServer).SendToStream(&streamerSendToStreamServer{stream})
}

type Streamer_SendToStreamServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamerSendToStreamServer struct {
	grpc.ServerStream
}

func (x *streamerSendToStreamServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerSendToStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Streamer_ReceiveFromStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).ReceiveFromStream(m, &streamerReceiveFromStreamServer{stream})
}

type Streamer_ReceiveFromStreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type streamerReceiveFromStreamServer struct {
	grpc.ServerStream
}

func (x *streamerReceiveFromStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Streamer_ChatInStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServer).ChatInStream(&streamerChatInStreamServer{stream})
}

type Streamer_ChatInStreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamerChatInStreamServer struct {
	grpc.ServerStream
}

func (x *streamerChatInStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerChatInStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Streamer_ServiceDesc is the grpc.ServiceDesc for Streamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendToStream",
			Handler:       _Streamer_SendToStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "receiveFromStream",
			Handler:       _Streamer_ReceiveFromStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "chatInStream",
			Handler:       _Streamer_ChatInStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream/stream.proto",
}
